// app.js

// charge les variables d'environnement depuis .env
require('dotenv').config();

const express = require('express'); // framework web
const mongoose = require('mongoose'); // connecteur MongoDB
const helmet = require('helmet'); // s√©curit√© des headers
const cors = require('cors'); // gestion cross-origin
const rateLimit = require('express-rate-limit'); // protection brute-force
const path = require('path'); // utilitaires chemins de fichiers

// import des routes
const authRoutes = require('./routes/authRoutes');
const memberRoutes = require('./routes/memberRoutes');
const taskRoutes = require('./routes/taskRoutes');

const app = express(); // cr√©ation de l'application express

// rate limit : emp√™che trop de requ√™tes depuis une m√™me IP
const limiter = rateLimit({
  windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS) || 60000, // fen√™tre en ms
  max: parseInt(process.env.RATE_LIMIT_MAX) || 100 // max requ√™tes par IP
});
app.use(limiter); // applique le rate limiter globalement

app.use(helmet()); // ajoute des headers HTTP s√©curis√©s
app.use(cors()); // autorise toutes les origines ; config possible pour restreindre
app.use(express.json()); // parse application/json

// route racine simple pour v√©rifier que l'API tourne
app.get('/', (req, res) => res.send('API Task Manager en ligne'));

// mont√©e des routes sous le pr√©fixe /api
app.use('/api/auth', authRoutes);
app.use('/api/members', memberRoutes);
app.use('/api/tasks', taskRoutes);

// connexion √† MongoDB via MONGO_URI
mongoose.connect(process.env.MONGO_URI)
  .then(() => {
    // d√©marrage du serveur apr√®s connexion DB r√©ussie
    const port = process.env.PORT || 3000;
    app.listen(port, () => console.log(`üöÄ Serveur d√©marr√© sur http://localhost:${port}`));
  })
  .catch(err => {
    console.error('‚ùå Impossible de se connecter √† MongoDB', err);
  });